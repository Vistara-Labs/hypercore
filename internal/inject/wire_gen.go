// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"github.com/spf13/afero"
	"vistara-node/internal/config"
	"vistara-node/pkg/app"
	"vistara-node/pkg/containerd"
	"vistara-node/pkg/defaults"
	"vistara-node/pkg/ports"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config, ports2 *ports.Collection) app.App {
	config2 := appConfig(cfg)
	appApp := app.New(config2, ports2)
	return appApp
}

// wire.go:

// wire: /Users/mayurchougule/development/vistara/vistara-node/internal/inject/wire.go:15:1:
//
//	inject InitializePorts: no provider found for *vistara-node/pkg/ports.Collection, output of injector
//
// wire: error loading packages
func InitializePorts(cfg *config.Config) error {

	return nil
}

func appConfig(cfg *config.Config) *app.Config {
	return &app.Config{
		RootStateDir:    cfg.StateRootDir,
		MaximumRetry:    3,
		DefaultProvider: cfg.DefaultVMProvider,
	}
}

func appPorts(repo ports.MicroVMRepository, providers map[string]ports.MicroVMService, es ports.EventService, is ports.IDService, ns ports.NetworkService, ims ports.ImageService, fs afero.Fs, ds ports.DiskService) *ports.Collection {

	return &ports.Collection{
		Repo:              repo,
		MicrovmProviders:  providers,
		// EventService:      es,
		// IdentifierService: is,
		// NetworkService:    ns,
		// ImageService:      ims,
		// FileSystem:        fs,
		// Clock:             time.Now,
	}
}

func containerdConfig(cfg *config.Config) *containerd.Config {
	return &containerd.Config{
		SnapshotterKernel: cfg.CtrSnapshotterKernel,
		SnapshotterVolume: defaults.ContainerdVolumeSnapshotter,
		SocketPath:        cfg.CtrSocketPath,
		Namespace:         cfg.CtrNamespace,
	}
}
